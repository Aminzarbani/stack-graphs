;; -*- coding: utf-8 -*-
;; ------------------------------------------------------------------------------------------------
;; Copyright Â© 2023, stack-graphs authors.
;; Licensed under either of Apache License, Version 2.0, or MIT license, at your option.
;; Please see the LICENSE-APACHE or LICENSE-MIT files in this distribution for license details.
;; ------------------------------------------------------------------------------------------------

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Stack graphs definition for Ruby
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Global Variables
;; ^^^^^^^^^^^^^^^^

global FILE_PATH
global ROOT_NODE
global JUMP_TO_SCOPE_NODE

;; Attribute Shorthands
;; ^^^^^^^^^^^^^^^^^^^^

attribute node_definition = node        => type = "pop_symbol", node_symbol = node, is_definition
attribute node_reference = node         => type = "push_symbol", node_symbol = node, is_reference
attribute pop_node = node               => type = "pop_symbol", node_symbol = node
attribute pop_scoped_node = node        => type = "pop_scoped_symbol", node_symbol = node
attribute pop_scoped_symbol = symbol    => type = "pop_scoped_symbol", symbol = symbol
attribute pop_symbol = symbol           => type = "pop_symbol", symbol = symbol
attribute push_node = node              => type = "push_symbol", node_symbol = node
attribute push_scoped_node = node       => type = "push_scoped_symbol", node_symbol = node
attribute push_scoped_symbol = symbol   => type = "push_scoped_symbol", symbol = symbol
attribute push_symbol = symbol          => type = "push_symbol", symbol = symbol
attribute scoped_node_definition = node => type = "pop_scoped_symbol", node_symbol = node, is_definition
attribute scoped_node_reference = node  => type = "push_scoped_symbol", node_symbol = node, is_reference
attribute symbol_definition = symbol    => type = "pop_symbol", symbol = symbol, is_definition
attribute symbol_reference = symbol     => type = "push_symbol", symbol = symbol, is_reference

attribute node_symbol = node            => symbol = (source-text node), source_node = node

;; Program
;; ^^^^^^^

(program)@prog {
    node @prog.lexical_defs
    node @prog.lexical_scope
    node @prog.root_defs

    ;; program lexical scope inherits global scope
    edge @prog.lexical_scope -> ROOT_NODE

    ;; program lexical scope inherits global scope via the root
    ;; scope marker <::>
    node root_scope
    attr (root_scope) pop_symbol = "<::>"
    edge root_scope -> ROOT_NODE
    edge @prog.lexical_scope -> root_scope

    ;; top-level definitions are accessible from the global scope
    edge ROOT_NODE -> @prog.lexical_defs
    edge ROOT_NODE -> @prog.root_defs
}

(program (_)@stmt)@prog {
    ;; statements inherit program lexical scope
    edge @stmt.lexical_scope -> @prog.lexical_scope

    ;; program inherits statement definitions
    edge @prog.lexical_defs -> @stmt.lexical_defs
    edge @prog.root_defs -> @stmt.root_defs
}

;; Statements
;; ^^^^^^^^^^

[
    (class)
    (module)
    (uninterpreted)
]@stmt {
    node @stmt.instance_defs
    node @stmt.lexical_defs
    node @stmt.lexical_scope
    node @stmt.root_defs
    node @stmt.static_defs
}

[
    (class name:(_)@name)
    (module name:(_)@name)
]@class {
    ;; expose the class definition
    edge @class.lexical_defs -> @name.lexical_def
    edge @class.root_defs -> @name.root_def

    ;; resolve the class in the lexical scope
    edge @name.ref -> @class.lexical_scope
}

(class body:(_)@body) {
    node dot
    attr (dot) pop_symbol = "."

    node def
    attr (def) pop_symbol = "new"

    edge @body.static_defs -> dot
    edge dot -> def
    edge def -> @body.instance_defs
}

[
    (class name:(_)@name body:(_)@body)
    (module name:(_)@name body:(_)@body)
]@class {
    ;; body inherits class lexical scope
    edge @body.lexical_scope -> @class.lexical_scope

    ;; body inherits other definitions of this class
    edge @body.lexical_scope -> @name.value

    ;; class body consists of body definitions
    edge @name.body -> @body.lexical_defs
    edge @body.lexical_defs -> @body.static_defs

    ;; root definitions are exposed upwards
    edge @class.root_defs -> @body.root_defs
}

(body_statement)@body {
    node @body.instance_defs
    node @body.lexical_defs
    node @body.lexical_scope
    node @body.root_defs
    node @body.static_defs
}

(body_statement (_)@stmt)@body {
    ;; statements inherits body lexical scope
    edge @stmt.lexical_scope -> @body.lexical_scope

    ;; body definitions consists of statement definitions
    edge @body.lexical_defs -> @stmt.lexical_defs
    edge @body.instance_defs -> @stmt.instance_defs
    edge @body.static_defs -> @stmt.static_defs
    edge @body.root_defs -> @stmt.root_defs
}

;; Expressions
;; ^^^^^^^^^^^

[
    (_primary/constant)
    (_primary/scope_resolution)
    (assignment)
    (call)
    (integer)
    (method)
    (singleton_method)
]@expr {
    node @expr.lexical_defs
    node @expr.lexical_scope
    node @expr.instance_defs
    node @expr.static_defs
    node @expr.root_defs
    node @expr.expr_value
}

[
    (_primary/constant)
    (_primary/identifier)
    (_primary/scope_resolution)
]@name {
    edge @name.ref -> @name.lexical_scope
    edge @name.expr_value -> @name.value
}

(assignment left:(_)@name right:(_)@value)@assign {
    edge @assign.lexical_defs -> @name.lexical_def
    edge @assign.root_defs -> @name.root_def

    edge @value.lexical_scope -> @assign.lexical_scope
}

(call receiver:(_)@recv method:(_)@mthd_name)@call {
    node dot
    attr (dot) push_symbol = "."

    edge @call.expr_value -> @mthd_name.value
    edge @mthd_name.ref -> dot
    edge dot -> @recv.expr_value
    edge @recv.lexical_scope -> @call.lexical_scope
}

(method name:(_)@name)@method {
    node dot
    attr (dot) pop_symbol = "."

    node def
    attr (def) node_definition = @name

    edge @method.instance_defs -> dot
    edge dot -> def
}

(singleton_method name:(_)@name)@method {
    node dot
    attr (dot) pop_symbol = "."

    node def
    attr (def) node_definition = @name

    edge @method.static_defs -> dot
    edge dot -> def
}


;; Identifiers
;; ^^^^^^^^^^^

;; Identifiers are single or scoped names and can appear in reference
;; and definition positions. These rules create both reference and
;; definition nodes, and ensure both support arbitrarily deep nesting.
;;
;; The nodes available to connect the refences are:
;;     .ref     The reference. This node should be connected to the
;;              lexical scope where the definition should resolve.
;;     .value   The value the reference resolves to. References that
;;              need to be resolved in this value should connect to
;;              this node.
;;
;; The nodes available to connect the definitions are:
;;     .def     The definition. Scopes exposing the definition should
;;              create an edge to this node.
;;     .body    The body of this definition. This node should be connected
;;              to the definitions that are members of this definition.

[
    (constant)
    (identifier)
    (scope_resolution)
]@identifier {
    node @identifier.body
    node @identifier.lexical_def
    node @identifier.ref
    node @identifier.root_def
    node @identifier.value
}

;;;; References
;;;; ``````````

(constant)@constant {
    node ref
    attr (ref) node_reference = @constant

    node scope_sep
    attr (scope_sep) push_symbol = "::"

    edge @constant.value -> ref
    edge ref -> scope_sep
    edge scope_sep -> @constant.ref
}

(identifier)@identifier {
    node ref
    attr (ref) node_reference = @identifier

    edge @identifier.value -> ref
    edge ref -> @identifier.ref
}

(scope_resolution scope:(_)@scope name:(_)@name)@scope_res {
    edge @scope_res.value -> @name.value
    edge @name.ref -> @scope.value
    edge @scope.ref -> @scope_res.ref
}

(scope_resolution !scope name:(_)@name)@scope_res {
    node root_scope
    attr (root_scope) symbol_reference = "<::>"

    edge @scope_res.value -> @name.value
    edge @name.ref -> root_scope
    edge root_scope -> @scope_res.ref
}

;;;; Definitions
;;;; ```````````

(constant)@constant {
    node def
    attr (def) node_definition = @constant

    node scope_sep
    attr (scope_sep) pop_symbol = "::"

    edge @constant.lexical_def -> scope_sep
    edge scope_sep -> def
    edge def -> @constant.body
}

(scope_resolution scope:(_)@scope name:(_)@name)@scope_res {
    edge @scope_res.lexical_def -> @scope.lexical_def
    edge @scope_res.root_def -> @scope.root_def
    edge @scope.body -> @name.lexical_def
    edge @name.body -> @scope_res.body
}

(scope_resolution !scope name:(_)@name)@scope_res {
    edge @scope_res.root_def -> @name.lexical_def
    edge @name.body -> @scope_res.body
}

;; Comments
;; ^^^^^^^^

(comment)@comment {
    node @comment.body
    node @comment.instance_defs
    node @comment.lexical_def
    node @comment.lexical_defs
    node @comment.lexical_scope
    node @comment.root_def
    node @comment.root_defs
    node @comment.static_defs
    node @comment.value
}
